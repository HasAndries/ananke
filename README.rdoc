= Ananke

Ananke is a DSL that extends the functionality of Sinatra for easy creation of Restful Services and Resources:

  #myapp.rb
  require 'ananke'
  require 'sinatra/main' #This is only for Demo purposes
  #--------------------Repositories---------------------
  module Repository
    module User
      @data = [{:id => '1', :name => 'One'}, {:id => '2', :name => 'Two'}]
      def self.all
        @data.to_s
      end
      def self.one(id)
        index = @data.index{ |d| d[:id] == id}
        (index.nil? && '') || @data[index].to_s
      end
    end
  end
  #-------------------REST Resources--------------------
  rest :user do
    id :id
  end

Install the gem and run with:

  gem install ananke
  ruby -rubygems myapp.rb

All Users
  http://localhost:4567/user
One User
  http://localhost:4567/user/1

== REST Resources
`rest` defines a complete Resource, and constructs Sinatra Routes
based on what's available in it's respective Repository. Routes are:

  get     '/name/?'   -> Repository::Capitalize(name).all
  get     '/name/id'  -> Repository::Capitalize(name).one(id)
  post    '/name'     -> Repository::Capitalize(name).new(data)
  put     '/name/id'  -> Repository::Capitalize(name).edit(id, data)
  delete  '/name/id'  -> Repository::Capitalize(name).delete(id)

The REST media type can be built up:

  required :name
  optional :country

== Repositories
The Default Repository can be changed:

 ananke.default_repository = 'MyRepository'

== Validation
Validation can be added on any field by providing arguments after a field declaration:

  required :name, :length => 4

This will cause the paramater to be validated against the method defined in Ananke::Rules. Custom Rules
can be added to the module and provided as arguments. Current Default included rules are:

  length(min)

Validation Methods are Invoked in the Ananke::Rules context, and has access to a class variable named
value, which holds the value for the currently valuated Parameter.

To Add a Custom Rule:

  rule :name, do
    value == [expected] ? nil : 'Not Expected Value'
  end

  required :name, :name

or

  module Ananke
    module Rules
      def validate_name
        value == [expected] ? nil : 'Not Expected Value'
      end
    end
  end

  required :name, :name

or Advanced

  module Ananke
    module Rules
      def validate_name(extra)
        value == [expected using extra] ? nil : 'Not Expected Value'
      end
    end
  end

  required :name, :name => extra

== Future
A short list of future development:
  - Refactor!
  - Return Value Strategy
  - Resource Exposes Media Type
  - HyperMedia
  - Lots more `bullet-proofing`
  - ETag Support

== More

* {Project Website}[http://https://github.com/HasAndries/ananke/]
* {Issue tracker}[https://github.com/HasAndries/ananke/issues]
* {Twitter}[http://twitter.com/HasAndries]